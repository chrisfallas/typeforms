import{createContext as e,useMemo as zz} from"react";import{v4 as Az} from"uuid";import{useMemo as p,useState as g} from"react";var a=({initialValues:J={},validateOnSubmit:_=!0,validateOnChange:$=!1,validateOnBlur:N=!1,schemaValidation:H,onChange:q,onSubmit:M})=>{const[Y,w]=g(J),[U,B]=g({}),[E,G]=g({isSubmitting:!1}),{isSubmitting:S}=E,f=async(z)=>G((A)=>({...A,isSubmitting:z})),j=(z)=>z?Y[z]:void 0,x=(z)=>z?U[z]:void 0,y=async(z,A,K)=>{const{include:L,exclude:T}=K,Z={},X=await A(z);for(let Q in X){let W=!0;if(L&&!L.includes(Q))W=!1;if(T&&T.includes(Q))W=!1;if(!W)continue;Z[Q]=X[Q]}return Z},F=async(z,A,K)=>{const{include:L,exclude:T}=K,Z={};for(let X in A){let Q=!0;if(L&&!L.includes(X))Q=!1;if(T&&T.includes(X))Q=!1;if(!Q)continue;const W=A[X],k=z[X],t=await W?.(k);Z[X]=t}return Z},I=async(z={})=>{const{data:A,updateFormState:K=!0}=z;if(!H||!A)return{};let L;if(typeof H==="function")L=await y(A,H,z);else L=await F(A,H,z);if(K)B((Z)=>({...Z,...L}));const T={};for(let Z in L){const X=L[Z];if(X?.length)T[Z]=X}return T},D=(z)=>{let A=!1,K,L;if(typeof z==="boolean")A=z;else if(Array.isArray(z.include))A=!0,K=z.include;else if(Array.isArray(z.exclude))A=!0,L=z.exclude;return{isValidationRequired:A,include:K,exclude:L}},O=async(z)=>{const{isValidationRequired:A,include:K,exclude:L}=D($),T={};let Z=0;const X=[];for(let{name:Q,value:W}of z){if(!Q)continue;if(["",void 0,null].includes(W))T[Q]=void 0;else T[Q]=W;if(T[Q]!==j(Q))Z++;let k=A;if(K&&!K.includes(Q))k=!1;if(L&&L.includes(Q))k=!1;if(!k)continue;X.push(Q)}if(X.length)I({data:T,include:X});if(Z>0)w((Q)=>{const W={...Q,...T};return new Promise(()=>q?.(W)),W})},R=async(z,A)=>{if(!z||A===j(z))return;O([{name:z,value:A}])},s=async(z)=>{const A=z.target.name;if(!A)return;let K=z.target.value;if(K&&z.target.type==="number")K=Number(K);R(A,K)},r=async(z)=>{const A=z.target.name;if(!A)return;const K=j(A);console.log("onBlur",A,K)},o=async(z)=>{z.preventDefault(),f(!0);try{const{isValidationRequired:A,include:K,exclude:L}=D(_);if(!A)await M?.({ok:!0,data:Y});else{const T=await I({data:Y,include:K,exclude:L});if(!Object.keys(T).length)await M?.({ok:!0,data:Y});else await M?.({ok:!1,errors:T})}}finally{f(!1)}},l=async()=>{w(J),B({}),new Promise(()=>q?.(J))},i=p(()=>{const z=JSON.stringify(J),A=JSON.stringify(Y);return z!==A},[J,Y]),n=p(()=>{return!Object.keys(U).length},[U]);return{data:Y,isValid:n,isDirty:i,isSubmitting:S,errors:U,getValue:j,setValue:R,setValues:O,getErrors:x,onChange:s,onBlur:r,onSubmit:o,validate:I,reset:l}},V=a;import{jsxDEV as Kz} from"react/jsx-dev-runtime";var h=e(null),Jz=({customFormId:J,initialValues:_,validateOnSubmit:$,validateOnChange:N,validateOnBlur:H,schemaValidation:q,onChange:M,onSubmit:Y,render:w,children:U})=>{const B=zz(()=>J||Az(),[J]),G={...V({initialValues:_,validateOnSubmit:$,validateOnChange:N,validateOnBlur:H,schemaValidation:q,onChange:M,onSubmit:Y}),formId:B};return Kz(h.Provider,{value:G,children:w?w(G):U},void 0,!1,void 0,this)},v=Jz;import{jsxDEV as c} from"react/jsx-dev-runtime";var Lz=(J)=>{const{initialValues:_,validateOnSubmit:$,validateOnChange:N,validateOnBlur:H,schemaValidation:q,onChange:M,onSubmit:Y,children:w,id:U,render:B,...E}=J;return c(v,{customFormId:U,initialValues:_,validateOnSubmit:$,validateOnChange:N,validateOnBlur:H,schemaValidation:q,onChange:M,onSubmit:Y,render:(G)=>c("form",{id:G.formId,onSubmit:G.onSubmit,...E,children:B?B(G):w},void 0,!1,void 0,this)},void 0,!1,void 0,this)},u=Lz;import{useContext as Qz} from"react";var Tz=()=>{const J=Qz(h);if(!J)throw new Error("useFormContext must be used within a FormProvider");return J},b=Tz;var Xz=(J)=>{const _=b(),$=`${_.formId}-${J}`,N=_.getValue(J);return{id:$,value:N,setValue:async(q)=>{if(J)_.setValue(J,q)},onChange:_.onChange,onBlur:_.onBlur}},C=Xz;import{jsxDEV as P,Fragment as m} from"react/jsx-dev-runtime";var Yz=(J)=>{const{id:_,name:$,value:N,onChange:H,onBlur:q,label:M,labelId:Y,labelClassName:w,labelRef:U,labelWrap:B,labelPlacement:E,render:G,...S}=J,{value:f,...j}=C($),x=_||j.id,y=async(R)=>{j.onChange(R),new Promise(()=>H?.(R.target.value))},F=async(R)=>{j.onBlur(R),new Promise(()=>q?.(R))},I={...S,id:x,name:$,value:$?String(f??""):N,onChange:y,onBlur:F};if(G)return G(I);const D=P("input",{...I},void 0,!1,void 0,this);if(!M)return D;if(B==="wrap")return P("label",{id:Y,className:w,ref:U,children:[P("span",{children:M},void 0,!1,void 0,this),D]},void 0,!0,void 0,this);const O=P("label",{id:Y,className:w,ref:U,htmlFor:x,children:P("span",{children:M},void 0,!1,void 0,this)},void 0,!1,void 0,this);if(E==="bottom")return P(m,{children:[D,O]},void 0,!0,void 0,this);return P(m,{children:[O,D]},void 0,!0,void 0,this)},d=Yz;var Zz=()=>({Form:u,Input:d,applyTypes:(J)=>J}),bz=Zz;export{C as useFormElement,b as useFormContext,bz as default};
