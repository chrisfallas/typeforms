import{createContext as b,useMemo as F} from"react";import{v4 as c} from"uuid";import{useMemo as x,useState as h} from"react";var V=({initialValues:R={},schemaValidation:A,onChange:J,onSubmit:_})=>{const[K,X]=h(R),Q=(T)=>T?K[T]:void 0,Z=async(T)=>{X((q)=>{const z={...q};let W=!1;for(let{name:N,value:L}of T){if(!N||L===Q(N))continue;if(W=!0,["",void 0,null].includes(L))z[N]=void 0;else z[N]=L}if(W)J?.(z);return W?z:q})},$=async(T,q)=>{if(!T||q===Q(T))return;Z([{name:T,value:q}])},Y=async(T)=>{const q=T.target.name;if(!q)return;let z=T.target.value;if(z&&T.target.type==="number")z=Number(z);$(q,z)},j=async(T)=>{const q=T.target.name;if(!q)return;const z=Q(q);console.log("onBlur",q,z)},B=async(T)=>{T.preventDefault(),_?.({ok:!0,data:K})},O=async()=>{X(R),J?.(R)},H=x(()=>{const T=JSON.stringify(R),q=JSON.stringify(K);return T!==q},[R,K]);return{data:K,isDirty:H,getValue:Q,setValue:$,setValues:Z,onChange:Y,onBlur:j,onSubmit:B,reset:O}},E=V;import{jsxDEV as d} from"react/jsx-dev-runtime";var w=b(null),C=({customFormId:R,initialValues:A,schemaValidation:J,onChange:_,onSubmit:K,render:X,children:Q})=>{const Z=F(()=>R||c(),[R]),Y={...E({initialValues:A,schemaValidation:J,onChange:_,onSubmit:K}),formId:Z};return d(w.Provider,{value:Y,children:X?X(Y):Q},void 0,!1,void 0,this)},f=C;import{jsxDEV as k} from"react/jsx-dev-runtime";var v=(R)=>{const{initialValues:A,schemaValidation:J,onChange:_,onSubmit:K,children:X,id:Q,render:Z,...$}=R;return k(f,{customFormId:Q,initialValues:A,schemaValidation:J,onChange:_,onSubmit:K,render:(Y)=>k("form",{id:Y.formId,onSubmit:Y.onSubmit,...$,children:Z?Z(Y):X},void 0,!1,void 0,this)},void 0,!1,void 0,this)},g=v;import{useContext as p} from"react";var i=()=>{const R=p(w);if(!R)throw new Error("useFormContext must be used within a FormProvider");return R},G=i;var u=(R)=>{const A=G(),J=`${A.formId}-${R}`,_=A.getValue(R);return{id:J,value:_,setValue:async(X)=>{if(R)A.setValue(R,X)},onChange:A.onChange,onBlur:A.onBlur}},S=u;import{jsxDEV as U,Fragment as I} from"react/jsx-dev-runtime";var s=(R)=>{const{id:A,name:J,value:_,onChange:K,onBlur:X,label:Q,labelId:Z,labelClassName:$,labelRef:Y,labelWrap:j,labelPlacement:B,render:O,...H}=R,{value:D,...T}=S(J),q=A||T.id,z=(M)=>{T.onChange(M),K?.(M.target.value)},W=(M)=>{T.onBlur(M),X?.(M)},N={...H,id:q,name:J,value:J?String(D??""):_,onChange:z,onBlur:W};if(O)return O(N);const L=U("input",{...N},void 0,!1,void 0,this);if(!Q)return L;if(j==="wrap")return U("label",{id:Z,className:$,ref:Y,children:[U("span",{children:Q},void 0,!1,void 0,this),L]},void 0,!0,void 0,this);const P=U("label",{id:Z,className:$,ref:Y,htmlFor:q,children:U("span",{children:Q},void 0,!1,void 0,this)},void 0,!1,void 0,this);if(B==="bottom")return U(I,{children:[L,P]},void 0,!0,void 0,this);return U(I,{children:[P,L]},void 0,!0,void 0,this)},y=s;var r=()=>({Form:g,Input:y,applyTypes:(R)=>R}),MR=r;export{S as useFormElement,G as useFormContext,MR as default};
