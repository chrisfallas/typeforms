import{createContext as e,useMemo as AA} from"react";import{v4 as JA} from"uuid";import{useMemo as p,useState as v} from"react";import{useState as n} from"react";var t=({schemaValidation:J})=>{const[T,H]=n({}),U=(K)=>K?T[K]:void 0,w=async(K,z,_)=>{const{include:A,exclude:W}=_,Y={},L=await z(K);for(let $ in L){let B=!0;if(A&&!A.includes($))B=!1;if(W&&W.includes($))B=!1;if(!B)continue;Y[$]=L[$]}return Y},M=async(K,z,_)=>{const{include:A,exclude:W}=_,Y={};for(let L in z){let $=!0;if(A&&!A.includes(L))$=!1;if(W&&W.includes(L))$=!1;if(!$)continue;const B=z[L],D=K[L],P=await B?.(D);Y[L]=P}return Y};return{errors:T,getErrors:U,validate:async(K={})=>{const{data:z,updateState:_=!0}=K;if(!J||!z)return{};let A;if(typeof J==="function")A=await w(z,J,K);else A=await M(z,J,K);if(_){const Y=JSON.stringify(T),L=JSON.stringify({...T,...A});if(Y!==L)H(($)=>({...$,...A}))}const W={};for(let Y in A){const L=A[Y];if(L?.length)W[Y]=L}return W},checkValidationStrategy:(K)=>{let z=!1,_,A;if(typeof K==="boolean")z=K;else if(Array.isArray(K.include))z=!0,_=K.include;else if(Array.isArray(K.exclude))z=!0,A=K.exclude;return{isValidationRequired:z,include:_,exclude:A}},resetErrors:async()=>H({})}},h=t;var a=({initialValues:J={},validateOnSubmit:T=!0,validateOnChange:H=!1,validateOnBlur:U=!1,schemaValidation:w,onChange:M,onSubmit:G})=>{const[Z,q]=v(J),[K,z]=v({isSubmitting:!1}),{isSubmitting:_}=K,{errors:A,getErrors:W,validate:Y,checkValidationStrategy:L,resetErrors:$}=h({schemaValidation:w}),B=async(Q)=>z((X)=>({...X,isSubmitting:Q})),D=(Q)=>Q?Z[Q]:void 0,P=async(Q)=>{const{isValidationRequired:X,include:N,exclude:k}=L(H),j={};let O=0;const y=[];for(let{name:R,value:x}of Q){if(!R)continue;if(["",void 0,null].includes(x))j[R]=void 0;else j[R]=x;if(j[R]!==D(R))O++;let F=X;if(N&&!N.includes(R))F=!1;if(k&&k.includes(R))F=!1;if(!F)continue;y.push(R)}if(y.length)Y({data:j,include:y});if(O>0)q((R)=>{const x={...R,...j};return new Promise(()=>M?.(x)),x})},E=async(Q,X)=>{if(!Q||X===D(Q))return;P([{name:Q,value:X}])},S=async(Q)=>{const X=Q.target.name;if(!X)return;let N=Q.target.value;if(N&&Q.target.type==="number")N=Number(N);E(X,N)},I=async(Q)=>{const X=Q.target.name;if(!X)return;const{isValidationRequired:N,include:k,exclude:j}=L(U);let O=N;if(k&&!k.includes(X))O=!1;if(j&&j.includes(X))O=!1;if(!O)return;Y({data:Z,include:[X]})},r=async(Q)=>{Q.preventDefault(),B(!0);try{const{isValidationRequired:X,include:N,exclude:k}=L(T);if(!X)await G?.({ok:!0,data:Z});else{const j=await Y({data:Z,include:N,exclude:k});if(!Object.keys(j).length)await G?.({ok:!0,data:Z});else await G?.({ok:!1,errors:j})}}finally{B(!1)}},o=async()=>{q(J),$(),new Promise(()=>M?.(J))},l=p(()=>{const Q=JSON.stringify(J),X=JSON.stringify(Z);return Q!==X},[J,Z]),i=p(()=>{return!Object.keys(A).length},[A]);return{data:Z,isValid:i,isDirty:l,isSubmitting:_,errors:A,getValue:D,setValue:E,setValues:P,getErrors:W,onChange:S,onBlur:I,onSubmit:r,validate:Y,reset:o}},V=a;import{jsxDEV as zA} from"react/jsx-dev-runtime";var g=e(null),KA=({customFormId:J,initialValues:T,validateOnSubmit:H,validateOnChange:U,validateOnBlur:w,schemaValidation:M,onChange:G,onSubmit:Z,render:q,children:K})=>{const z=AA(()=>J||JA(),[J]),A={...V({initialValues:T,validateOnSubmit:H,validateOnChange:U,validateOnBlur:w,schemaValidation:M,onChange:G,onSubmit:Z}),formId:z};return zA(g.Provider,{value:A,children:q?q(A):K},void 0,!1,void 0,this)},c=KA;import{jsxDEV as u} from"react/jsx-dev-runtime";var LA=(J)=>{const{initialValues:T,validateOnSubmit:H,validateOnChange:U,validateOnBlur:w,schemaValidation:M,onChange:G,onSubmit:Z,children:q,id:K,render:z,..._}=J;return u(c,{customFormId:K,initialValues:T,validateOnSubmit:H,validateOnChange:U,validateOnBlur:w,schemaValidation:M,onChange:G,onSubmit:Z,render:(A)=>u("form",{id:A.formId,onSubmit:A.onSubmit,..._,children:z?z(A):q},void 0,!1,void 0,this)},void 0,!1,void 0,this)},m=LA;import{useContext as QA} from"react";var TA=()=>{const J=QA(g);if(!J)throw new Error("useFormContext must be used within a FormProvider");return J},C=TA;var XA=(J)=>{const T=C(),H=`${T.formId}-${J}`,U=T.getValue(J);return{id:H,value:U,setValue:async(M)=>{if(J)T.setValue(J,M)},onChange:T.onChange,onBlur:T.onBlur}},b=XA;import{jsxDEV as f,Fragment as s} from"react/jsx-dev-runtime";var YA=(J)=>{const{id:T,name:H,value:U,onChange:w,onBlur:M,label:G,labelId:Z,labelClassName:q,labelRef:K,labelWrap:z,labelPlacement:_,render:A,...W}=J,{value:Y,...L}=b(H),$=T||L.id,B=async(I)=>{L.onChange(I),new Promise(()=>w?.(I.target.value))},D=async(I)=>{L.onBlur(I),new Promise(()=>M?.(I))},P={...W,id:$,name:H,value:H?String(Y??""):U,onChange:B,onBlur:D};if(A)return A(P);const E=f("input",{...P},void 0,!1,void 0,this);if(!G)return E;if(z==="wrap")return f("label",{id:Z,className:q,ref:K,children:[f("span",{children:G},void 0,!1,void 0,this),E]},void 0,!0,void 0,this);const S=f("label",{id:Z,className:q,ref:K,htmlFor:$,children:f("span",{children:G},void 0,!1,void 0,this)},void 0,!1,void 0,this);if(_==="bottom")return f(s,{children:[E,S]},void 0,!0,void 0,this);return f(s,{children:[S,E]},void 0,!0,void 0,this)},d=YA;var ZA=()=>({Form:m,Input:d,applyTypes:(J)=>J}),vA=ZA;export{b as useFormElement,C as useFormContext,vA as default};
